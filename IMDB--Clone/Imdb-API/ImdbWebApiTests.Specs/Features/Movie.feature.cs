// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ImdbWebApiTests.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MovieResourceFeature : object, Xunit.IClassFixture<MovieResourceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Movie.feature"
#line hidden
        
        public MovieResourceFeature(MovieResourceFeature.FixtureData fixtureData, ImdbWebApiTests_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Movie Resource", "Movie feature will testify the get movie,get movie by id,create movie,delete and " +
                    "update movie.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get All Movies")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Get All Movies")]
        [Xunit.TraitAttribute("Category", "GetAllMovies")]
        public virtual void GetAllMovies()
        {
            string[] tagsOfScenario = new string[] {
                    "GetAllMovies"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All Movies", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When("I make GET Request \'/movies\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then("response code must be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 8
 testRunner.And("response data must look like from file \'C:\\Users\\Robin\\Desktop\\Movie.txt\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get Movie by Id")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Get Movie by Id")]
        [Xunit.TraitAttribute("Category", "GetMovieById")]
        [Xunit.InlineDataAttribute("1", "200", @"{""id"":1,""name"":""Pathaan"",""yor"":2022,""plot"":""It is..."",""language"":""Hindi"",""profit"":100000,""actors"":[{""id"":1,""name"":""Shah Rukh Khan"",""bio"":""He is a Superstar.."",""dob"":""11/4/1965 12:00:00 AM"",""gender"":""Male""}],""genres"":[{""id"":1,""name"":""Drama""}],""producer"":{""id"":1,""name"":""Karan"",""bio"":""He is .."",""dob"":""10/4/1965 12:00:00 AM"",""gender"":""Male""},""coverImage"":""https//www.img.png""}", new string[0])]
        [Xunit.InlineDataAttribute("5", "404", "No Movie found with id= 5", new string[0])]
        public virtual void GetMovieById(string movieId, string statusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GetMovieById"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("movieId", movieId);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Movie by Id", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.When(string.Format("I make GET Request \'/movies\' with parameter \'{0}\'", movieId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And(string.Format("response data must look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Add a Movie")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Add a Movie")]
        [Xunit.TraitAttribute("Category", "AddMovie")]
        [Xunit.InlineDataAttribute("{\"Name\":\"Pathaan\",\"Plot\":\"It is...\",\"Yor\":2022,\"Actors\":\"1\",\"Genres\":\"1\",\"Profit\"" +
            ":100000,\"Language\":\"Hindi\",\"ProducerId\":1,\"CoverImage\":\"https//www.img.png\"}", "201", "{\"id\":1}", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"\",\"Plot\":\"It is...\",\"Yor\":2022,\"Actors\":\"1\",\"Genres\":\"1\",\"Profit\":100000" +
            ",\"Language\":\"Hindi\",\"ProducerId\":1,\"CoverImage\":\"https//www.img.png\"}", "400", "Name cannot be empty.", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"Pathaan\",\"Plot\":\"\",\"Yor\":2022,\"Actors\":\"1\",\"Genres\":\"1\",\"Profit\":100000," +
            "\"Language\":\"Hindi\",\"ProducerId\":1,\"CoverImage\":\"https//www.img.png\"}", "400", "Plot cannot be empty.", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"Pathaan\",\"Plot\":\"It is...\",\"Yor\":2024,\"Actors\":\"1\",\"Genres\":\"1\",\"Profit\"" +
            ":100000,\"Language\":\"Hindi\",\"ProducerId\":1,\"CoverImage\":\"https//www.img.png\"}", "400", "Invalid Year of release.", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"Pathaan\",\"Plot\":\"It is...\",\"Yor\":2022,\"Actors\":\"1\",\"Genres\":\"1\",\"Profit\"" +
            ":100000,\"Language\":\"\",\"ProducerId\":1,\"CoverImage\":\"https//www.img.png\"}", "400", "Language cannot be empty.", new string[0])]
        public virtual void AddAMovie(string movieBody, string statusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AddMovie"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("movieBody", movieBody);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a Movie", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
 testRunner.When(string.Format("I make POST Request \'/movies\' with body \'{0}\'", movieBody), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.And(string.Format("response data must look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update a Movie")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Update a Movie")]
        [Xunit.TraitAttribute("Category", "UpdateMovie")]
        [Xunit.InlineDataAttribute("1", "{\"Name\":\"Pathaan\",\"Plot\":\"It is...\",\"Yor\":2022,\"Actors\":\"1\",\"Genres\":\"1\",\"Profit\"" +
            ":100000,\"Language\":\"Hindi\",\"ProducerId\":1,\"CoverImage\":\"https//www.img.png\"}", "200", "Updated Succesfully.", new string[0])]
        [Xunit.InlineDataAttribute("1", "{\"Name\":\"\",\"Plot\":\"It is...\",\"Yor\":2022,\"Actors\":\"1\",\"Genres\":\"1\",\"Profit\":100000" +
            ",\"Language\":\"Hindi\",\"ProducerId\":1,\"CoverImage\":\"https//www.img.png\"}", "400", "Name cannot be empty.", new string[0])]
        [Xunit.InlineDataAttribute("1", "{\"Name\":\"Pathaan\",\"Plot\":\"\",\"Yor\":2022,\"Actors\":\"1\",\"Genres\":\"1\",\"Profit\":100000," +
            "\"Language\":\"Hindi\",\"ProducerId\":1,\"CoverImage\":\"https//www.img.png\"}", "400", "Plot cannot be empty.", new string[0])]
        [Xunit.InlineDataAttribute("1", "{\"Name\":\"Pathaan\",\"Plot\":\"It is...\",\"Yor\":2024,\"Actors\":\"1\",\"Genres\":\"1\",\"Profit\"" +
            ":100000,\"Language\":\"Hindi\",\"ProducerId\":1,\"CoverImage\":\"https//www.img.png\"}", "400", "Invalid Year of release.", new string[0])]
        [Xunit.InlineDataAttribute("1", "{\"Name\":\"Pathaan\",\"Plot\":\"It is...\",\"Yor\":2022,\"Actors\":\"1\",\"Genres\":\"1\",\"Profit\"" +
            ":100000,\"Language\":\"\",\"ProducerId\":1,\"CoverImage\":\"https//www.img.png\"}", "400", "Language cannot be empty.", new string[0])]
        [Xunit.InlineDataAttribute("0", "{\"Name\":\"Pathaan\",\"Plot\":\"It is...\",\"Yor\":2022,\"Actors\":\"1\",\"Genres\":\"1\",\"Profit\"" +
            ":100000,\"Language\":\"\",\"ProducerId\":1,\"CoverImage\":\"https//www.img.png\"}", "404", "No Movie found with id= 0", new string[0])]
        public virtual void UpdateAMovie(string movieId, string movieBody, string statusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UpdateMovie"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("movieId", movieId);
            argumentsOfScenario.Add("movieBody", movieBody);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a Movie", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
 testRunner.When(string.Format("I make PUT Request \'/movies\' with parameter \'{0}\' and body \'{1}\'", movieId, movieBody), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.And(string.Format("response data must look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Delete a Movie")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Delete a Movie")]
        [Xunit.TraitAttribute("Category", "DeleteMovie")]
        [Xunit.InlineDataAttribute("1", "200", "Deleted Successfully.", new string[0])]
        [Xunit.InlineDataAttribute("0", "404", "No Movie found with id= 0", new string[0])]
        public virtual void DeleteAMovie(string movieId, string statusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DeleteMovie"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("movieId", movieId);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a Movie", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 53
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
 testRunner.When(string.Format("I make DELETE Request \'/movies\' with parameter \'{0}\'", movieId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.And(string.Format("response data must look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MovieResourceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MovieResourceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
